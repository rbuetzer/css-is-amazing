.perspective-origin {
    transform-style: preserve-3d;
    position: relative;
    perspective: 10cm;
    /*perspective-origin: calc(var(--offset-x) / var(--max-offset) * 100%) calc(var(--offset-y) / var(--max-offset) * 100%);*/
    perspective-origin: center center;
    height: 100vw;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
}

.floor-3d {
    transform-style: preserve-3d;
    --size: calc(var(--maze-cell-size) * var(--maze-size));

    height: var(--maze-height);
    width: var(--maze-width);

    transform: rotateX(45deg)
}

.floor-translate {
    transform-style: preserve-3d;
    height: 100%;
    width: 100%;
    --translate-x: calc(-1 * var(--x-direction) * ((var(--offset-y) + 0.5) * var(--maze-cell-size) - 50%) + (var(--y-direction)) * ((var(--offset-x) + 0.5) * var(--maze-cell-size) - 50%));
    --translate-y: calc(var(--x-direction) * ((var(--offset-x) + 0.5) * var(--maze-cell-size) - 50%) + (var(--y-direction)) * ((var(--offset-y) + 0.5) * var(--maze-cell-size) - 50%));

    transform: translateX(var(--translate-x)) translateY(var(--translate-y));
    transition: all 1s ease-out;
}

.floor-rotate {
    transform-style: preserve-3d;
    height: 100%;
    width: 100%;
    border: 3px solid black;
    rotate: var(--rotate-90-angle);
}

.floor-rotate::after {
    height: var(--maze-cell-size);
    width: var(--maze-cell-size);
    background-color: hotpink;

    counter-set: direction calc(var(--is-north) + 2 * var(--is-east) + 3 * var(--is-south) + 4 * var(--is-west));
    display: block;
    --direction-arrow: counter(direction, symbols(fixed "↑" "→" "↓" "←"));
    content: "↑North↑ " var(--direction-arrow) "Direction" var(--direction-arrow);
    font-size: smaller;
    line-height: 300%;
    margin-left: calc(var(--maze-cell-size) * var(--offset-x));
    margin-top: calc(var(--maze-cell-size) * var(--offset-y));
    transition: all 1s ease-out;
}

.wall {
    position: absolute;
    transform-style: preserve-3d;

    border: 3px solid green;
    background-color: rgb(144, 238, calc(144 * var(--is-center-x, 1)));

    opacity: 0.5;

    --wall-height: var(--maze-cell-size);
    --wall-width: var(--maze-cell-size);
    --wall-offset-x: 0;
    --wall-offset-y: 0;
    --is-wall-orientation-x: 0;
    --is-wall-orientation-y: 0;

    height: var(--wall-height);
    width: var(--wall-width);
    transform: 
        rotateX(calc(-90deg))
        rotateY(calc(var(--is-wall-orientation-y) * 90deg))
        translateX(calc(var(--is-wall-orientation-y) * (var(--wall-width) - var(--wall-height)) / -2))
        translateX(calc(var(--is-wall-orientation-y) * var(--wall-offset-y) * var(--maze-cell-size) * -1))
        translateX(calc(var(--is-wall-orientation-x) * var(--wall-offset-x) * var(--maze-cell-size)))
        translateY(calc(var(--wall-height) / -2))
        translateZ(calc(var(--is-wall-orientation-y) * var(--wall-width) / -2))
        translateZ(calc(var(--is-wall-orientation-y) * var(--wall-offset-x) * var(--maze-cell-size)))
        translateZ(calc(var(--is-wall-orientation-x) * var(--wall-height) / -2))
        translateZ(calc(var(--is-wall-orientation-x) * var(--wall-offset-y) * var(--maze-cell-size)))
}

.wall-north {
    --wall-width: var(--maze-width);
    --is-wall-orientation-x: 1;
}

.wall-south {
    --wall-width: var(--maze-width);
    --wall-offset-y: var(--maze-size);
    --is-wall-orientation-x: 1;
}

.wall-east {
    --wall-width: var(--maze-width);
    --wall-offset-x: var(--maze-size);
    --is-wall-orientation-y: 1;
}

.wall-west {
    --wall-width: var(--maze-width);
    --is-wall-orientation-y: 1;
}

.walls-x, .walls-y {
    height: 100%;
    width: 100%;
    position: absolute;
    transform-style: preserve-3d;
}

/**
 * x-y-position
 */

.walls-x .wall {
    --is-wall-orientation-x: 1;
    --wall-offset-y: var(--i);
    --wall-offset-x: calc(var(--j) - 1);
}

.walls-y .wall {
    --is-wall-orientation-y: 1;
    --wall-offset-x: var(--i);
    --wall-offset-y: calc(var(--j) - 1);
}

/**
 * hinges
 */

.wall {
    --is-center-hinge-x: calc(max(0, 1 + (var(--hinge-x) - var(--center-wall-offset)) * (var(--center-wall-offset) - var(--hinge-x))));
    --is-center-hinge-y: calc(max(0, 1 + (var(--hinge-y) - var(--center-wall-offset)) * (var(--center-wall-offset) - var(--hinge-y))));
    --hinge-id: calc(var(--hinge-x) * var(--max-offset) + var(--hinge-y))
}

.walls-x .wall {
    --is-hinge-x-east: clamp(0, calc(var(--center-wall-offset) - var(--wall-offset-x)), 1);
    --hinge-x: calc(var(--wall-offset-x) + var(--is-hinge-x-east));

    --is-hinge-y-south: 0;
    --hinge-y: var(--wall-offset-y);
}

.walls-y .wall {
    --is-hinge-x-west: 0;
    --hinge-x: var(--wall-offset-x);

    --is-hinge-y-south: clamp(0, calc(var(--center-wall-offset) - var(--wall-offset-y)), 1);
    --hinge-y: calc(var(--wall-offset-y) + var(--is-wall-orientation-y) * var(--is-hinge-y-south));
}

/**
 * DEBUG
 */

.wall::after {
    position: absolute;
    top: -20px;
    left: 50%;
    background-color: white;
    counter-set: debug var(--hinge-x);
    content: "" counter(debug, decimal)
}