.perspective-origin {
    transform-style: preserve-3d;
    position: relative;
    perspective: 10cm;
    perspective-origin: center center;
    height: min(100vh, 100vw);
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
}

.perspective-origin * {
    transform-style: preserve-3d;
}

.floor-3d {
    position: absolute;
    height: calc(var(--maze-cell-size) * (2 * var(--maze-size) - 1));
    width: calc(var(--maze-cell-size) * (2 * var(--maze-size) - 1));

    transition: all 1s ease-out;
    transform:
        rotateX(calc(var(--is-birdeye) * 40deg + var(--is-first-person-view) * 90deg))
        translateZ(calc(var(--is-first-person-view) * (-0.5 * var(--wall-height))))
        translateY(calc(var(--is-first-person-view) * 10cm));
}

.floor-translate {
    position: absolute;
    height: calc(var(--maze-cell-size) * var(--maze-size));
    width: calc(var(--maze-cell-size) * var(--maze-size));
    bottom: calc(var(--maze-cell-size) * var(--offset-y));
    right: calc(var(--maze-cell-size) * var(--offset-x));
    transition: all 1s ease-out;
}

.floor-rotate {
    height: 100%;
    width: 100%;
    rotate: var(--rotate-90-angle);
}

.floor-translate::after {
    height: var(--maze-cell-size);
    width: var(--maze-cell-size);
    border: 5px solid hotpink;
    box-sizing: border-box;

    counter-set: direction calc(var(--is-north) + 2 * var(--is-east) + 3 * var(--is-south) + 4 * var(--is-west));
    display: block;
    --direction-arrow: counter(direction, symbols(fixed "↑" "→" "↓" "←"));
    content: "↑North↑ " var(--direction-arrow) "Direction" var(--direction-arrow);
    font-size: smaller;
    line-height: 300%;
    position: absolute;
    left: calc(var(--maze-cell-size) * var(--offset-x));
    top: calc(var(--maze-cell-size) * var(--offset-y));
    transition: all 1s ease-out;
}

.wall {
    --wall-width: var(--maze-cell-size);
    --wall-offset-x: 0;
    --wall-offset-y: 0;
    --is-wall-orientation-x: 0;
    --is-wall-orientation-y: 0;
    --wall-color: oklch(calc(var(--is-wall-orientation-x) * 0.4 + var(--is-wall-orientation-y) * 0.2) 0.5 180deg);

    position: absolute;
    background-color: var(--wall-color);

    height: var(--wall-height);
    width: var(--wall-width);

    transform: 
        rotateX(calc(-90deg))
        rotateY(calc(var(--is-wall-orientation-y) * 90deg))
        translateX(calc(var(--is-wall-orientation-y) * (var(--wall-width) - var(--wall-height)) / -2))
        translateX(calc(var(--is-wall-orientation-y) * var(--wall-offset-y) * var(--maze-cell-size) * -1))
        translateX(calc(var(--is-wall-orientation-x) * var(--wall-offset-x) * var(--maze-cell-size)))
        translateY(calc(var(--wall-height) / -2))
        translateZ(calc(var(--is-wall-orientation-y) * var(--wall-width) / -2))
        translateZ(calc(var(--is-wall-orientation-y) * var(--wall-offset-x) * var(--maze-cell-size)))
        translateZ(calc(var(--is-wall-orientation-x) * var(--wall-height) / -2))
        translateZ(calc(var(--is-wall-orientation-x) * var(--wall-offset-y) * var(--maze-cell-size)));
}

.wall-north {
    --wall-width: var(--maze-width);
    --is-wall-orientation-x: 1;
}

.wall-south {
    --wall-width: var(--maze-width);
    --wall-offset-y: var(--maze-size);
    --is-wall-orientation-x: 1;
}

.wall-east {
    --wall-width: var(--maze-width);
    --wall-offset-x: var(--maze-size);
    --is-wall-orientation-y: 1;
}

.wall-west {
    --wall-width: var(--maze-width);
    --is-wall-orientation-y: 1;
}

.wall-front-x,
.wall-front-y {
    visibility: hidden;
    transform: none;
}

.wall-front-x {
    --is-wall-orientation-x: 1;
    --is-wall-orientation-y: 0;
    --wall-offset-x: calc(var(--offset-x));
    --wall-offset-y: calc(var(--offset-y) + var(--is-south));
    opacity: var(--is-y-direction);
}

.wall-front-y {
    --is-wall-orientation-x: 0;
    --is-wall-orientation-y: 1;
    --wall-offset-x: calc(var(--offset-x) + var(--is-east));
    --wall-offset-y: calc(var(--offset-y));
    opacity: var(--is-x-direction);
}

.wall-front-x::before,
.wall-front-y::before
{
    visibility: visible;
    position: fixed;
    max-height: var(--inner-button-size);
    max-width: var(--inner-button-size);
    margin: var(--button-margin);
    left: calc(50% - var(--button-size) / 2);
    top: calc(50% - var(--button-size) * 1.5);
    font-size: calc(3 * var(--button-size));
    overflow: hidden;
    color: transparent;
    background-color: black;
    opacity: 0.5;
    counter-set: random-bit calc(var(--random-bit, 99));
    content: counter(random-bit, random-bits);
    z-index: 200;
}

.walls-x, .walls-y {
    height: 100%;
    width: 100%;
    position: absolute;
}

.walls-x .wall,
.walls-y .wall {
    background-color: transparent;
    color: transparent;
    border: none;
    border-bottom: 1px solid grey;
    opacity: 1;
}

/**
 * Out of bounds wall visibility
 */

.walls-x .wall,
.walls-y .wall {
    opacity: clamp(0, calc(var(--maze-size) - max(var(--wall-offset-x), var(--wall-offset-y))), 1);
}

/**
 * x-y-position
 */

.walls-x .wall {
    --is-wall-orientation-x: 1;
    --wall-offset-y: var(--i);
    --wall-offset-x: calc(var(--j) - 1);
}

.walls-y .wall {
    --is-wall-orientation-y: 1;
    --wall-offset-x: var(--i);
    --wall-offset-y: calc(var(--j) - 1);
}

/**
 * Hinges
 */

.wall,
.wall-front-x,
.wall-front-y {
    --is-center-hinge-x: calc(max(0, 1 + (var(--hinge-x) - var(--center-wall-offset)) * (var(--center-wall-offset) - var(--hinge-x))));
    --is-center-hinge-y: calc(max(0, 1 + (var(--hinge-y) - var(--center-wall-offset)) * (var(--center-wall-offset) - var(--hinge-y))));
    --hinge-id: calc(var(--hinge-x) * var(--max-offset) + var(--hinge-y))
}

.walls-x .wall,
.wall-front-x {
    --is-hinge-x-east: clamp(0, calc(var(--center-wall-offset) - var(--wall-offset-x)), 1);
    --is-hinge-x-west: calc(1 - var(--is-hinge-x-east));

    --hinge-x: calc(var(--wall-offset-x) + var(--is-hinge-x-east));

    --is-hinge-y-north: 0;
    --is-hinge-y-south: 0;

    --hinge-y: var(--wall-offset-y);
}

.walls-y .wall,
.wall-front-y {
    --is-hinge-x-east: 0;
    --is-hinge-x-west: 0;

    --hinge-x: var(--wall-offset-x);

    --is-hinge-y-south: clamp(0, calc(var(--center-wall-offset) - var(--wall-offset-y)), 1);
    --is-hinge-y-north: calc(1 - var(--is-hinge-y-south));

    --hinge-y: calc(var(--wall-offset-y) + var(--is-wall-orientation-y) * var(--is-hinge-y-south));
}

/**
 * Wall randomness
 */

 .walls-x .wall,
 .walls-y .wall,
 .wall-front-x,
 .wall-front-y {
    --is-hinge-with-2-walls: max(0, calc(1 - var(--is-center-hinge-x) - var(--is-center-hinge-y)));
    --is-hinge-with-4-walls: max(0, calc(-1 + var(--is-center-hinge-x) + var(--is-center-hinge-y)));
    --is-hinge-with-3-walls: max(0, calc(1 - var(--is-hinge-with-2-walls) - var(--is-hinge-with-4-walls)));

    --random-bit-offset: calc(
        var(--is-hinge-with-2-walls) * var(--is-wall-orientation-y) +
        var(--is-hinge-with-3-walls) * var(--is-center-hinge-x) * (2 + var(--is-hinge-x-east) + 2 * var(--is-wall-orientation-y)) + 
        var(--is-hinge-with-3-walls) * var(--is-center-hinge-y) * (2 + var(--is-hinge-y-south) + 2 * var(--is-wall-orientation-x)) + 
        var(--is-hinge-with-4-walls) * (5 + var(--is-hinge-y-north) + 2 * var(--is-hinge-x-east) + 3 * var(--is-hinge-y-south))
    );

    --random-number: calc(var(--random-a) * var(--hinge-id) + var(--random-c));
    --random-bit: calc(9 * var(--random-number) + var(--random-bit-offset) + 1)
}

/**
 * Draw walls where necessary
 */

.walls-x .wall::before,
.walls-y .wall::before
{
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    font-size: 1000px;
    overflow: hidden;
    background-color: transparent;
    color: var(--wall-color);
    opacity: 1;
    counter-set: random-bit calc(var(--random-bit, 99));
    content: counter(random-bit, random-bits)
}

.start-square, 
.goal-square {
    height: var(--maze-cell-size);
    width: var(--maze-cell-size);
    font-size: calc(var(--maze-cell-size) * 2 / 3);
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
}

.start-square {
    top: 0;
    left: 0;
    background-color: greenyellow;
}

.goal-square {
    top: calc(var(--max-offset) * var(--maze-cell-size));
    left: calc(var(--max-offset) * var(--maze-cell-size));
    background-color: gold;
}

/**
 * DEBUG
 */

 .walls-x .wall::after,
 .walls-y .wall::after
 {
    display: none;
    position: absolute;
    top: -20px;
    left: 0;
    width: 100px;
    background-color: white;
    counter-set:
        hinge-id var(--hinge-id)
        random-number var(--random-number)
        random-bit-offset var(--random-bit-offset)
        random-bit calc(var(--random-bit, 99));
    content: counter(hinge-id, upper-alpha) " "  counter(random-number, decimal) " "  counter(random-bit-offset, decimal) " "  counter(random-bit, decimal)
}